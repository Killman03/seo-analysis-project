"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è SEO-–∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import os
from database import db_manager
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="SEO –ê–Ω–∞–ª–∏–∑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ - –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä SEO –ê–Ω–∞–ª–∏–∑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ - –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

# –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
period = st.sidebar.selectbox(
    "–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
    ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π", "–í—Å–µ –≤—Ä–µ–º—è"],
    index=0
)

# –í—ã–±–æ—Ä –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
search_engine = st.sidebar.selectbox(
    "–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:",
    ["–í—Å–µ", "Google", "Yandex"],
    index=0
)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def get_analysis_data(days=7):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        data = db_manager.get_recent_analysis(days=days)
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def get_competitors_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
    try:
        data = db_manager.get_competitors_analysis(limit=20)
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {e}")
        return pd.DataFrame()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
tab1, tab2, tab3, tab4 = st.tabs(["üìà –û–±–∑–æ—Ä", "üèÜ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", "üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üìã –û—Ç—á–µ—Ç—ã"])

with tab1:
    st.header("üìà –û–±—â–∏–π –æ–±–∑–æ—Ä")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    days_map = {"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π": 7, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π": 30, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π": 90, "–í—Å–µ –≤—Ä–µ–º—è": 365}
    df = get_analysis_data(days_map[period])
    
    if not df.empty:
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        if search_engine != "–í—Å–µ":
            engine_filter = "google" if search_engine == "Google" else "yandex"
            df = df[df['search_engine'] == engine_filter]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", len(df))
        
        with col2:
            unique_domains = df['domain'].nunique()
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤", unique_domains)
        
        with col3:
            avg_position = df['position'].mean()
            st.metric("–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è", f"{avg_position:.1f}")
        
        with col4:
            top_10_count = len(df[df['position'] <= 10])
            st.metric("–¢–æ–ø-10 –ø–æ–∑–∏—Ü–∏–π", top_10_count)
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–∑–∏—Ü–∏–π
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        fig_positions = px.histogram(
            df, 
            x='position', 
            nbins=20,
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ"
        )
        fig_positions.update_layout(xaxis_title="–ü–æ–∑–∏—Ü–∏—è", yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        st.plotly_chart(fig_positions, use_container_width=True)
        
        # –¢–æ–ø –¥–æ–º–µ–Ω–æ–≤
        st.subheader("–¢–æ–ø –¥–æ–º–µ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∑–∏—Ü–∏–π")
        domain_stats = df.groupby('domain').agg({
            'position': ['count', 'mean']
        }).round(2)
        domain_stats.columns = ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π', '–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è']
        domain_stats = domain_stats.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π', ascending=False).head(10)
        
        fig_domains = px.bar(
            domain_stats.reset_index(),
            x='domain',
            y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π',
            title="–¢–æ–ø-10 –¥–æ–º–µ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∑–∏—Ü–∏–π"
        )
        fig_domains.update_layout(xaxis_title="–î–æ–º–µ–Ω", yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π")
        st.plotly_chart(fig_domains, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        st.dataframe(
            df[['keyword', 'search_engine', 'position', 'domain', 'title', 'created_at']].head(20),
            use_container_width=True
        )
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

with tab2:
    st.header("üèÜ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
    
    competitors_df = get_competitors_data()
    
    if not competitors_df.empty:
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        col1, col2, col3 = st.columns(3)
        
        with col1:
            top_competitor = competitors_df.iloc[0]
            st.metric("–õ—É—á—à–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç", top_competitor['domain'])
        
        with col2:
            total_positions = competitors_df['total_positions'].sum()
            st.metric("–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π", total_positions)
        
        with col3:
            avg_positions = competitors_df['avg_position'].mean()
            st.metric("–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è", f"{avg_positions:.1f}")
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        st.subheader("–¢–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
        fig_competitors = px.bar(
            competitors_df.head(15),
            x='domain',
            y=['total_positions', 'top_3_positions', 'top_10_positions'],
            title="–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
            barmode='group'
        )
        fig_competitors.update_layout(xaxis_title="–î–æ–º–µ–Ω", yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π")
        st.plotly_chart(fig_competitors, use_container_width=True)
        
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        fig_pie = px.pie(
            competitors_df.head(10),
            values='total_positions',
            names='domain',
            title="–î–æ–ª—è –ø–æ–∑–∏—Ü–∏–π —Ç–æ–ø-10 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"
        )
        st.plotly_chart(fig_pie, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
        st.dataframe(competitors_df, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö")

with tab3:
    st.header("üîç –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    keyword_search = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É:")
    
    if keyword_search:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        google_positions = db_manager.get_keyword_positions(keyword_search, 'google')
        yandex_positions = db_manager.get_keyword_positions(keyword_search, 'yandex')
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Google")
            if google_positions:
                google_df = pd.DataFrame(google_positions)
                fig_google = px.bar(
                    google_df,
                    x='domain',
                    y='position',
                    title=f"–ü–æ–∑–∏—Ü–∏–∏ –≤ Google –¥–ª—è '{keyword_search}'",
                    color='position',
                    color_continuous_scale='RdYlGn_r'
                )
                fig_google.update_layout(xaxis_title="–î–æ–º–µ–Ω", yaxis_title="–ü–æ–∑–∏—Ü–∏—è")
                st.plotly_chart(fig_google, use_container_width=True)
                
                st.dataframe(google_df, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google")
        
        with col2:
            st.subheader("Yandex")
            if yandex_positions:
                yandex_df = pd.DataFrame(yandex_positions)
                fig_yandex = px.bar(
                    yandex_df,
                    x='domain',
                    y='position',
                    title=f"–ü–æ–∑–∏—Ü–∏–∏ –≤ Yandex –¥–ª—è '{keyword_search}'",
                    color='position',
                    color_continuous_scale='RdYlGn_r'
                )
                fig_yandex.update_layout(xaxis_title="–î–æ–º–µ–Ω", yaxis_title="–ü–æ–∑–∏—Ü–∏—è")
                st.plotly_chart(fig_yandex, use_container_width=True)
                
                st.dataframe(yandex_df, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Yandex")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    
    df = get_analysis_data(days_map[period])
    if not df.empty:
        keyword_stats = df.groupby('keyword').agg({
            'position': ['count', 'mean', 'min']
        }).round(2)
        keyword_stats.columns = ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π', '–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è', '–õ—É—á—à–∞—è –ø–æ–∑–∏—Ü–∏—è']
        keyword_stats = keyword_stats.sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π', ascending=False)
        
        fig_keywords = px.scatter(
            keyword_stats.reset_index(),
            x='–°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è',
            y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π',
            size='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π',
            hover_data=['keyword'],
            title="–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
        )
        st.plotly_chart(fig_keywords, use_container_width=True)
        
        st.dataframe(keyword_stats, use_container_width=True)

with tab4:
    st.header("üìã –û—Ç—á–µ—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if st.button("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."):
            try:
                report_file = db_manager.generate_report()
                if report_file:
                    st.success(f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report_file}")
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞
                    with open(report_file, 'r', encoding='utf-8') as f:
                        report_data = json.load(f)
                    
                    st.json(report_data)
                else:
                    st.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
            with st.spinner("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö..."):
                try:
                    csv_file = db_manager.export_results()
                    if csv_file:
                        st.success(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {csv_file}")
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                        with open(csv_file, 'r', encoding='utf-8') as f:
                            csv_data = f.read()
                        
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                            data=csv_data,
                            file_name=os.path.basename(csv_file),
                            mime="text/csv"
                        )
                    else:
                        st.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {e}")
    
    with col2:
        if st.button("üìà –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"):
            with st.spinner("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤..."):
                try:
                    competitors_df = get_competitors_data()
                    if not competitors_df.empty:
                        csv_file = db_manager.export_to_csv(
                            f"competitors_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            competitors_df.to_dict('records')
                        )
                        if csv_file:
                            st.success(f"–î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {csv_file}")
                        else:
                            st.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    st.info(f"""
    **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
    - –†–µ–≥–∏–æ–Ω Google: {Config.GOOGLE_REGION}
    - –†–µ–≥–∏–æ–Ω Yandex: {Config.YANDEX_REGION}
    - –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {Config.MAX_RESULTS}
    - –ó–∞–¥–µ—Ä–∂–∫–∞: {Config.DELAY_MIN}-{Config.DELAY_MAX} —Å–µ–∫
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏: {Config.USE_PROXY}
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        <p>SEO –ê–Ω–∞–ª–∏–∑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ - –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω | –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ SEO</p>
    </div>
    """,
    unsafe_allow_html=True
)

