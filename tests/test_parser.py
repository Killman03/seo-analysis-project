"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–æ–≤
"""
import sys
import os
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import Config
from parsers import GoogleParser, YandexParser, PageParser
from utils import proxy_manager

def test_google_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Google"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ Google")
    
    try:
        parser = GoogleParser(use_selenium=False)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–¥–Ω–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
        keyword = "–∫—É–ø–∏—Ç—å iPhone –ë–∏—à–∫–µ–∫"
        results = parser.parse_keyword(keyword)
        
        if results:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google")
            for i, result in enumerate(results[:3], 1):
                logger.info(f"{i}. {result['title']}")
                logger.info(f"   URL: {result['url']}")
                logger.info(f"   –î–æ–º–µ–Ω: {result['domain']}")
                logger.info("")
        else:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

def test_yandex_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Yandex"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ Yandex")
    
    try:
        parser = YandexParser(use_selenium=False)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –æ–¥–Ω–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º
        keyword = "–∫—É–ø–∏—Ç—å iPhone –ë–∏—à–∫–µ–∫"
        results = parser.parse_keyword(keyword)
        
        if results:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Yandex")
            for i, result in enumerate(results[:3], 1):
                logger.info(f"{i}. {result['title']}")
                logger.info(f"   URL: {result['url']}")
                logger.info(f"   –î–æ–º–µ–Ω: {result['domain']}")
                logger.info("")
        else:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Yandex")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Yandex –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

def test_page_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü")
    
    try:
        parser = PageParser()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º —Å–∞–π—Ç–æ–º
        test_url = "https://www.google.com"
        page_data = parser.parse_page(test_url)
        
        if page_data:
            logger.info("–î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω—ã:")
            logger.info(f"Title: {page_data.get('title', 'N/A')}")
            logger.info(f"Description: {page_data.get('description', 'N/A')[:100]}...")
            logger.info(f"Word count: {page_data.get('word_count', 0)}")
            logger.info(f"H1 tags: {len(page_data.get('h1', []))}")
            logger.info(f"Images: {len(page_data.get('images', []))}")
            logger.info(f"Links: {len(page_data.get('links', []))}")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
        return False

def test_proxy_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏")
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è User-Agent
        user_agent = proxy_manager.get_random_user_agent()
        logger.info(f"User-Agent: {user_agent}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = proxy_manager.get_headers()
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        
        # –¢–µ—Å—Ç —Å–µ—Å—Å–∏–∏
        session = proxy_manager.get_session()
        logger.info("–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SEO-–ø–∞—Ä—Å–µ—Ä–∞")
    
    tests = [
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏", test_proxy_manager),
        ("Google –ø–∞—Ä—Å–µ—Ä", test_google_parser),
        ("Yandex –ø–∞—Ä—Å–µ—Ä", test_yandex_parser),
        ("–ü–∞—Ä—Å–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü", test_page_parser),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"–¢–µ—Å—Ç: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*50}")
    logger.info("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info(f"{'='*50}")
    
    passed = 0
    total = len(tests)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
    
    logger.info(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 